full kit, full framework

will probably use `bun` since it makes it stupid simple to preprocess code using macros.

it will have ssr and ssg.

i wanna a seperate client side and server side code.

first server side code will run, create an set of data.
and those data will be send to client side with json.

we need a built-in router for ssr to work, because ssr is based on routes.

i wanna use hydration but only the client-side code will run twice.
you dont actually need client-side code tho, you can just use the data coming from the server side.

probably gonna make it similar to the way svelte does it, if i cant come up with anything else.

i wanna make stuff also work with js disabled.
wanna have something similar to svelte-kit form actions.
wanna have use:enhance or use:boost

or tbh, normall, with frameworks like these when you click on `<a>` it changes the route using history api
why not make the `<form>` do the same by default

yeah after making this first version, im gonna see if i can add more stuff
dont wanna think that much into future

might even remake it multiple times, until getting it right

anyway, coming soon

since my current current project im doing with this is on IPFS, im gonna add this, ssr and stuff, after that.

also have some job projects, so gonna take time to start.

might even call it "master-ts/server" and not "master-ts/kit"
because a web site doesnt have to be http based, so saying kit, makes it sounds like it has to be http
so for http servers, you use "master-ts/server"
and for ipfs you can just use "master-ts", might even make something called "master-ts/ipfs" that will give you some util tools and some building step that is best for ipfs.
it should produce one index.html file and inline everything in it, as long as you dont do, async imports. having one file is better for ipfs
because it takes time to find each file.

might have a built-in template for solidity contracts and ethers and wallet connection and stuff.

i might actually call it "master-ts/web3"

ipfs as front-end, solidity as backend db
it might also have support for TheGraph maybe for indexing.
or that might be too much?? maybe

it should give a quick template for a truly decenterlized, on the web3.
no web2 shit, template should include settings page for users to easily change their ipfs gateways and read-only json-rpc providers.

it should be a goto for people who build web3 apps, and help them understand and stay on web3 without adding web2 shit.full kit, full framework

will probably use `bun` since it makes it stupid simple to preprocess code using macros.

it will have ssr and ssg.

i wanna a seperate client side and server side code.

first server side code will run, create an set of data.
and those data will be send to client side with json.

we need a built-in router for ssr to work, because ssr is based on routes.

i wanna use hydration but only the client-side code will run twice.
you dont actually need client-side code tho, you can just use the data coming from the server side.

probably gonna make it similar to the way svelte does it, if i cant come up with anything else.

i wanna make stuff also work with js disabled.
wanna have something similar to svelte-kit form actions.
wanna have use:enhance or use:boost

or tbh, normall, with frameworks like these when you click on `<a>` it changes the route using history api
why not make the `<form>` do the same by default

yeah after making this first version, im gonna see if i can add more stuff
dont wanna think that much into future

might even remake it multiple times, until getting it right

anyway, coming soon

since my current current project im doing with this is on IPFS, im gonna add this, ssr and stuff, after that.

also have some job projects, so gonna take time to start.

might even call it "master-ts/server" and not "master-ts/kit"
because a web site doesnt have to be http based, so saying kit, makes it sounds like it has to be http
so for http servers, you use "master-ts/server"
and for ipfs you can just use "master-ts", might even make something called "master-ts/ipfs" that will give you some util tools and some building step that is best for ipfs.
it should produce one index.html file and inline everything in it, as long as you dont do, async imports. having one file is better for ipfs
because it takes time to find each file.

might have a built-in template for solidity contracts and ethers and wallet connection and stuff.

i might actually call it "master-ts/web3"

ipfs as front-end, solidity as backend db
it might also have support for TheGraph maybe for indexing.
or that might be too much?? maybe

it should give a quick template for a truly decenterlized, on the web3.
no web2 shit, template should include settings page for users to easily change their ipfs gateways and read-only json-rpc providers.

it should be a goto for people who build web3 apps, and help them understand and stay on web3 without adding web2 shit.
